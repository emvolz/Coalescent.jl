var documenterSearchIndex = {"docs":
[{"location":"#Coalescent.jl","page":"Coalescent.jl","title":"Coalescent.jl","text":"","category":"section"},{"location":"#Index","page":"Coalescent.jl","title":"Index","text":"","category":"section"},{"location":"","page":"Coalescent.jl","title":"Coalescent.jl","text":"","category":"page"},{"location":"#Functions","page":"Coalescent.jl","title":"Functions","text":"","category":"section"},{"location":"","page":"Coalescent.jl","title":"Coalescent.jl","text":"SimTree\ntonewick\nModelFGY\nSampleConfiguration\nsolveodes","category":"page"},{"location":"#Coalescent.SimTree","page":"Coalescent.jl","title":"Coalescent.SimTree","text":"SimTree\n\nRepresents a simulated coalescent tree.\n\nFields\n\nparent::Array{Union{Nothing,Int}}: Parent nodes\nchild::Array{Union{Nothing,Int}}: Child nodes\nn::Int: Number of tips\nnNode::Int: Number of internal nodes\nedgelength::Array{Union{Nothing,Float64}}: Edge lengths\nheights::Array{Union{Nothing,Float64}}: Node heights\ntiplabs::Array{Union{Nothing,String}}: Tip labels\nshs::Array{Union{Nothing,Float64}}: Sample heights\ndescendants::Union{Nothing,BitMatrix}: Descendant matrix\ndaughters::Union{Nothing,Vector{Tuple{Int, Int, Int, Int}}}: Daughter nodes\ndemes::Union{Nothing,Vector{String}}: Demes for each node\n\n\n\n\n\n","category":"type"},{"location":"#Coalescent.tonewick","page":"Coalescent.jl","title":"Coalescent.tonewick","text":"tonewick(o)\n\nConvert a SimTree to a Newick format string.\n\nArguments\n\no::SimTree: The SimTree to convert\n\nReturns\n\nString: Newick format representation of the tree\n\n\n\n\n\n","category":"function"},{"location":"#Coalescent.ModelFGY","page":"Coalescent.jl","title":"Coalescent.ModelFGY","text":"ModelFGY\n\nRepresents a structured Forward-in-time Genealogy (FGY) model for coalescent simulations.\n\nFields\n\nmodelname::String: Name of the model\nbirthrxn::Array{Reaction}: Birth reactions in the model\nmigrationrxn::Array{Reaction}: Migration reactions in the model\ndeathrxn::Array{Reaction}: Death reactions in the model\nnondemerxn::Array{Reaction}: Non-deme reactions in the model\ndemes::Array{String}: Names of demes in the model\nnondemes::Union{Nothing,Array{String}}: Names of non-deme variables\nnumberdemes::Int: Number of demes\nnumbernondemes::Int: Number of non-deme variables\ninitial::Dict{String,Number}: Initial conditions for variables\nt0::Float64: Initial time\ntfin::Float64: Final time\nparameters::Union{Nothing,Dict{String,Number}}: Model parameters\nhelperexprs::Union{Nothing,Array{Expr}}: Helper expressions for the model\n\n\n\n\n\n","category":"type"},{"location":"#Coalescent.SampleConfiguration","page":"Coalescent.jl","title":"Coalescent.SampleConfiguration","text":"SampleConfiguration\n\nRepresents a configuration for sampling in coalescent simulations.\n\nFields\n\nsconf::Array{Tuple{Union{Nothing,String}, Float64}}: Array of tuples containing deme (or nothing) and sampling time\n\n\n\n\n\n","category":"type"},{"location":"#Coalescent.solveodes","page":"Coalescent.jl","title":"Coalescent.solveodes","text":"solveodes(model::ModelFGY; odemethod = :(Rosenbrock23()), res::Union{Missing,Int64} = missing)\n\nSolve the ordinary differential equations (ODEs) defined by the given model.\n\nArguments\n\nmodel::ModelFGY: The structured FGY model containing the ODEs to solve\n\nKeywords\n\nodemethod = :(Rosenbrock23()): The ODE solver method to use\nres::Union{Missing,Int64} = missing: The number of time points to return in the solution\n\nReturns\n\nODESolution: The solution of the ODEs\n\n\n\n\n\n","category":"function"},{"location":"#Detailed-Function-Documentation","page":"Coalescent.jl","title":"Detailed Function Documentation","text":"","category":"section"},{"location":"#SimTree","page":"Coalescent.jl","title":"SimTree","text":"","category":"section"},{"location":"","page":"Coalescent.jl","title":"Coalescent.jl","text":"SimTree(Ne::Float64, n::Int64)\nSimTree(Ne::Float64, sampletimes::Array{Float64}, p...;  tmrcaguess::Union{Nothing,Float64}=nothing, algorithm=ALGO_MARKOV)\nSimTree(Ne::Function, sampletimes::Array{Float64}, p...; tmrcaguess::Union{Nothing,Float64}=nothing, algorithm=ALGO_STATIONARY)\nSimTree(Ne::Function, n::Int64, p...; tmrcaguess::Union{Nothing,Float64}=nothing, algorithm=ALGO_MARKOV)\nSimTree(model::ModelFGY, sample::SampleConfiguration; computedescendants = false)","category":"page"},{"location":"#Coalescent.SimTree-Tuple{Float64, Int64}","page":"Coalescent.jl","title":"Coalescent.SimTree","text":"SimTree(Ne::Float64, n::Int64)::SimTree\n\nSimulate a coalescent tree with constant Ne and n samples at time 0, without specifying tmrcaguess.\n\nArguments\n\nNe::Float64: Constant effective population size\nn::Int64: Number of samples\n\nReturns\n\nSimTree: The simulated coalescent tree\n\n\n\n\n\n","category":"method"},{"location":"#Coalescent.SimTree-Tuple{Float64, Array{Float64}, Vararg{Any}}","page":"Coalescent.jl","title":"Coalescent.SimTree","text":"SimTree(Ne::Float64, sampletimes::Array{Float64}, p...;  tmrcaguess::Union{Nothing,Float64}=nothing, algorithm=ALGO_MARKOV)::SimTree\n\nSimulate a coalescent tree with constant Ne and flexible sampling times.\n\nArguments\n\nNe::Float64: Constant effective population size\nsampletimes::Array{Float64}: Array of sample times\ntmrcaguess::Float64: Initial guess for the time to most recent common ancestor\np...: Additional parameters (unused for constant Ne)\n\nKeywords\n\nalgorithm::String = ALGO_STATIONARY: Algorithm to use for simulation (ALGOSTATIONARY or ALGOMARKOV)\n\nReturns\n\nSimTree: The simulated coalescent tree\n\n\n\n\n\n","category":"method"},{"location":"#Coalescent.SimTree-Tuple{Function, Array{Float64}, Vararg{Any}}","page":"Coalescent.jl","title":"Coalescent.SimTree","text":"SimTree(Ne::Function, sampletimes::Array{Float64}, p...; tmrcaguess::Union{Nothing,Float64}=nothing, algorithm=ALGO_STATIONARY)::SimTree\n\nSimulate a coalescent tree with flexible Ne function and sampling times.\n\nArguments\n\nNe::Function: Effective population size function\nsampletimes::Array{Float64}: Array of sample times\ntmrcaguess::Float64: Initial guess for the time to most recent common ancestor\np...: Additional parameters for the Ne function\n\nKeywords\n\nalgorithm::String = ALGO_MARKOV: Algorithm to use for simulation (ALGOSTATIONARY or ALGOMARKOV)\n\nReturns\n\nSimTree: The simulated coalescent tree\n\n\n\n\n\n","category":"method"},{"location":"#Coalescent.SimTree-Tuple{Function, Int64, Vararg{Any}}","page":"Coalescent.jl","title":"Coalescent.SimTree","text":"SimTree(Ne::Function, n::Int64,p...; tmrcaguess::Union{Nothing,Float64}=nothing, algorithm=ALGO_MARKOV)::SimTree\n\nSimulate a coalescent tree with flexible Ne function and n samples at time 0.\n\nArguments\n\nNe::Function: Effective population size over time function\nn::Int64: Number of samples\ntmrcaguess::Float64: Initial guess for the time to most recent common ancestor\np...: Additional parameters for the Ne function\n\nKeywords\n\nalgorithm::String = ALGO_MARKOV: Algorithm to use for simulation (ALGOSTATIONARY or ALGOMARKOV)\n\nReturns\n\nSimTree: The simulated coalescent tree\n\n\n\n\n\n","category":"method"},{"location":"#Coalescent.SimTree-Tuple{ModelFGY, SampleConfiguration}","page":"Coalescent.jl","title":"Coalescent.SimTree","text":"SimTree(model::ModelFGY, sample::SampleConfiguration; computedescendants = false)\n\nSimulate a coalescent tree based on a given model and sampling configuration.\n\nArguments\n\nmodel::ModelFGY: The structured FGY model to simulate\nsample::SampleConfiguration: The sampling configuration for the simulation\n\nKeywords\n\ncomputedescendants::Bool = false: Whether to compute descendants for each node\n\nReturns\n\nSimTree: A simulated coalescent tree\n\n\n\n\n\n","category":"method"},{"location":"#ModelFGY","page":"Coalescent.jl","title":"ModelFGY","text":"","category":"section"},{"location":"","page":"Coalescent.jl","title":"Coalescent.jl","text":"ModelFGY(; modelname::String, birthrxn::Array{Reaction}, migrationrxn::Array{Reaction}, deathrxn::Array{Reaction}, nondemerxn::Array{Reaction}, demes::Array{String}, nondemes::Union{Nothing,Array{String}}, initial::Dict{String,Float64}, t0::Float64, tfin::Float64, parameters::Dict{String,Float64}, helperexprs::Union{Nothing,Array{Expr}})\nModelFGY(conffn::String)","category":"page"},{"location":"#Coalescent.ModelFGY-Tuple{}","page":"Coalescent.jl","title":"Coalescent.ModelFGY","text":"ModelFGY(; confstr::String)\n\nConstructor for ModelFGY from a YAML configuration string.\n\nArguments\n\nconfstr::String: String defining model in YAML format \n\nReturns\n\nModelFGY: The constructed model\n\n\n\n\n\n","category":"method"},{"location":"#Coalescent.ModelFGY-Tuple{String}","page":"Coalescent.jl","title":"Coalescent.ModelFGY","text":"ModelFGY(conffn::String)\n\nConstructor for ModelFGY from a YAML configuration file.\n\nArguments\n\nconffn::String: Path to the YAML configuration file\n\nReturns\n\nModelFGY: The constructed model\n\n\n\n\n\n","category":"method"},{"location":"#SampleConfiguration","page":"Coalescent.jl","title":"SampleConfiguration","text":"","category":"section"},{"location":"","page":"Coalescent.jl","title":"Coalescent.jl","text":"SampleConfiguration(conffn::String)\nSampleConfiguration(; confstr::String)","category":"page"},{"location":"#Coalescent.SampleConfiguration-Tuple{String}","page":"Coalescent.jl","title":"Coalescent.SampleConfiguration","text":"SampleConfiguration(conffn::String)\n\nCreate a SampleConfiguration from a YAML configuration file.\n\nArguments\n\nconffn::String: Path to the YAML configuration file\n\nReturns\n\nSampleConfiguration: The constructed sampling configuration\n\n\n\n\n\n","category":"method"},{"location":"#Coalescent.SampleConfiguration-Tuple{}","page":"Coalescent.jl","title":"Coalescent.SampleConfiguration","text":"SampleConfiguration(; confstr::String)\n\nCreate a SampleConfiguration from a YAML configuration string.\n\nArguments\n\nconfstr::String: YAML configuration string defining the sampling scheme\n\nReturns\n\nSampleConfiguration: The constructed sampling configuration\n\n\n\n\n\n","category":"method"},{"location":"#Other-Functions","page":"Coalescent.jl","title":"Other Functions","text":"","category":"section"},{"location":"","page":"Coalescent.jl","title":"Coalescent.jl","text":"tonewick(o)\nCoalescent.distancematrix(t)\nsolveodes(model::ModelFGY; odemethod = :(Rosenbrock23()), res::Union{Missing,Int64} = missing)","category":"page"},{"location":"#Coalescent.tonewick-Tuple{Any}","page":"Coalescent.jl","title":"Coalescent.tonewick","text":"tonewick(o)\n\nConvert a SimTree to a Newick format string.\n\nArguments\n\no::SimTree: The SimTree to convert\n\nReturns\n\nString: Newick format representation of the tree\n\n\n\n\n\n","category":"method"},{"location":"#Coalescent.distancematrix-Tuple{Any}","page":"Coalescent.jl","title":"Coalescent.distancematrix","text":"distancematrix(t)::Matrix{Float64}\n\nCompute the distance matrix for a SimTree.\n\nArguments\n\nt::SimTree: The SimTree to compute distances for\n\nReturns\n\nMatrix{Float64}: The computed distance matrix\n\n\n\n\n\n","category":"method"},{"location":"#Coalescent.solveodes-Tuple{ModelFGY}","page":"Coalescent.jl","title":"Coalescent.solveodes","text":"solveodes(model::ModelFGY; odemethod = :(Rosenbrock23()), res::Union{Missing,Int64} = missing)\n\nSolve the ordinary differential equations (ODEs) defined by the given model.\n\nArguments\n\nmodel::ModelFGY: The structured FGY model containing the ODEs to solve\n\nKeywords\n\nodemethod = :(Rosenbrock23()): The ODE solver method to use\nres::Union{Missing,Int64} = missing: The number of time points to return in the solution\n\nReturns\n\nODESolution: The solution of the ODEs\n\n\n\n\n\n","category":"method"}]
}
